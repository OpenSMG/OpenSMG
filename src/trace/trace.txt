 --- modulename: smgui, funcname: <module>
smgui.py(1): import sys
smgui.py(2): import ctypes
smgui.py(3): import SMG
 --- modulename: SMG, funcname: <module>
SMG.py(4): __author__ = 'martijn'
SMG.py(5): import win32gui
SMG.py(6): import time
SMG.py(7): from PySide.QtCore import QThread, QObject, Signal
SMG.py(8): import pythoncom
SMG.py(9): import messages
 --- modulename: messages, funcname: <module>
messages.py(1): from random import choice, randint
messages.py(2): from smgLogger import logger
 --- modulename: smgLogger, funcname: <module>
smgLogger.py(3): import os, sys
smgLogger.py(4): import logging
smgLogger.py(5): exceptionLogger = logging.getLogger(__name__ + "exception")
smgLogger.py(7): if not os.path.exists("logs"):
smgLogger.py(10): exceptionHandler = logging.FileHandler("logs/exceptions.txt")
smgLogger.py(11): exceptionLogger.addHandler(exceptionHandler)
smgLogger.py(14): def handle_exception(exc_type, exc_value, exc_traceback):
smgLogger.py(21): sys.excepthook = handle_exception
smgLogger.py(29): logger = logging.getLogger(__name__ + "logging")
smgLogger.py(30): handler = logging.FileHandler("logs/logging.txt")
smgLogger.py(31): logger.addHandler(handler)
smgLogger.py(33): logger.setLevel(logging.INFO)
messages.py(4): import time
messages.py(6): no_song_playing     = "No song is currently playing"
messages.py(7): first_time          = "Since this is your first time using SMG <a href='http://www.youtube.com/watch?v=2yeSfw4iJrw'>watch the introduction video</a>!"
messages.py(8): get_groovemarklet   = "This music player requires the <a href='http://martijnbrekelmans.com/SMG/groovemarklet.php'>Groovemarklet</a>! Otherwise it won't work :("
messages.py(9): visit_forums        = "Stop by the forums if you need any additional help. <a href='http://www.obsproject.com/forum/viewtopic.php?f=22&t=4223'>OBS</a>."
messages.py(10): windows_message     = 'WMP and Zune also unlikely to work at all on Windows 7 or higher, try running in Administrator mode Fixes will come later'
messages.py(11): new_spotify_message = 'Spotify support is finally here! Pause and play your song in Spotify to start getting spotify\'s song'
messages.py(12): MPCHC_message       = 'MPC-HC gets the song name from the song\'s filename, they can be incorrect.'
messages.py(14): def timeOfDayMessage():
messages.py(27):     'For feedback, questions or bug reportscontact us at smg@martijnbrekelmans.com',
messages.py(28):     "Have any suggestions? Stop by the <a href='http://www.obsproject.com/forum/viewtopic.php?f=22&t=4223'>obsforums</a> or send us an email.",
messages.py(29):     "Something's not working right? Remove the configuration folder and restart smg.",
messages.py(30):     'Found a bug? Send us an email, smg@martijnbrekelmans.com',
messages.py(31):     "Your player isn't supported? Send us an email, smg@martijnbrekelmans.com",
messages.py(32):     'Have a good day! :)',
messages.py(33):     'Thanks for using smg.',
messages.py(34):     'This program was made by Azeirah.',
messages.py(35):     'You can enable and disable music apps in the Options tab!',
messages.py(36):     'You can change your output directory in the Options tab!',
messages.py(37):     "Want darude :: songstorm instead of darude - songstorm? Check out the edit tab!",
messages.py(38):     "Spotify used to be unsupported by all music programs for over 2 months!",
messages.py(39):     "Did you know music makes plants grow faster?",
messages.py(40):     "Did you know Astronaut Chris Hadfield recorded an album in space?",
messages.py(41):     "Did you know that over 1500 people use SMG?",
messages.py(42):     timeOfDayMessage(),
 --- modulename: messages, funcname: timeOfDayMessage
messages.py(15):     hour = time.localtime().tm_hour
messages.py(17):     if hour >= 0 and hour < 6:
messages.py(19):     elif hour > 6 and hour < 12:
messages.py(21):     elif hour > 12 and hour < 18:
messages.py(23):     elif hour > 18 and hour <= 24:
messages.py(24):         return "Have a nice evening                    :)"
messages.py(46):     "There's a 1 in 60 chance that smg will say your currently playing song is 'darude sandstorm'",
messages.py(47):     "One of the messages that can appear here is a lie!"
messages.py(50): def update_message(hasntUpdatedForSoManyTimes):
messages.py(65): def random_message():
SMG.py(10): import ProgramSkeleton
 --- modulename: ProgramSkeleton, funcname: <module>
ProgramSkeleton.py(1): import os
ProgramSkeleton.py(2): import Configuration
 --- modulename: Configuration, funcname: <module>
Configuration.py(4): __author__ = 'martijn'
Configuration.py(5): from configparser import ConfigParser
Configuration.py(6): import configparser
Configuration.py(7): import sys
Configuration.py(8): import os
Configuration.py(9): import GLOBALS
 --- modulename: GLOBALS, funcname: <module>
GLOBALS.py(1): __author__ = 'martijn'
GLOBALS.py(2): import os
GLOBALS.py(3): from smgLogger import logger
GLOBALS.py(5): ROOT = os.getcwd()
GLOBALS.py(7): VERSION = 2.15
GLOBALS.py(177): }"""
Configuration.py(10): from smgLogger import logger
Configuration.py(12): class Configuration(ConfigParser):
 --- modulename: Configuration, funcname: Configuration
Configuration.py(12): class Configuration(ConfigParser):
Configuration.py(13):     def __init__(self):
Configuration.py(21):     def get(self = None, section = None, option = None):
Configuration.py(31):     def set(self, section, option, value = (None,)):
Configuration.py(43):     @staticmethod
Configuration.py(52):     @staticmethod
Configuration.py(58):     def set_config_file_path(self, config_path):
Configuration.py(63):     def exists(self):
Configuration.py(69):     def save(self):
Configuration.py(81):     def change_directory(self, directory):
Configuration.py(85):     def create_configuration_file(self):
Configuration.py(90):     def get_path_to_output_file(self):
Configuration.py(95):     def default_configuration_file(self):
Configuration.py(134):     def toggle_title_edit_option(self, option, state):
ProgramSkeleton.py(3): import GLOBALS
ProgramSkeleton.py(4): import Connection
 --- modulename: Connection, funcname: <module>
Connection.py(1): import urllib.request as r
 --- modulename: utils, funcname: <module>
utils.py(5): """Miscellaneous utilities."""
utils.py(8):     'collapse_rfc2231_value',
utils.py(9):     'decode_params',
utils.py(10):     'decode_rfc2231',
utils.py(11):     'encode_rfc2231',
utils.py(12):     'formataddr',
utils.py(13):     'formatdate',
utils.py(14):     'format_datetime',
utils.py(15):     'getaddresses',
utils.py(16):     'make_msgid',
utils.py(17):     'mktime_tz',
utils.py(18):     'parseaddr',
utils.py(19):     'parsedate',
utils.py(20):     'parsedate_tz',
utils.py(21):     'parsedate_to_datetime',
utils.py(22):     'unquote',
utils.py(25): import os
utils.py(26): import re
utils.py(27): import time
utils.py(28): import base64
utils.py(29): import random
utils.py(30): import socket
utils.py(31): import datetime
utils.py(32): import urllib.parse
utils.py(33): import warnings
utils.py(34): from io import StringIO
utils.py(36): from email._parseaddr import quote
utils.py(37): from email._parseaddr import AddressList as _AddressList
utils.py(38): from email._parseaddr import mktime_tz
utils.py(40): from email._parseaddr import parsedate, parsedate_tz, _parsedate_tz
utils.py(42): from quopri import decodestring as _qdecode
utils.py(45): from email.encoders import _bencode, _qencode
utils.py(46): from email.charset import Charset
 --- modulename: base64mime, funcname: <module>
base64mime.py(25): """
base64mime.py(28):     'body_decode',
base64mime.py(29):     'body_encode',
base64mime.py(30):     'decode',
base64mime.py(31):     'decodestring',
base64mime.py(32):     'header_encode',
base64mime.py(33):     'header_length',
base64mime.py(37): from base64 import b64encode
base64mime.py(38): from binascii import b2a_base64, a2b_base64
base64mime.py(40): CRLF = '\r\n'
base64mime.py(41): NL = '\n'
base64mime.py(42): EMPTYSTRING = ''
base64mime.py(45): MISC_LEN = 7
base64mime.py(50): def header_length(bytearray):
base64mime.py(61): def header_encode(header_bytes, charset='iso-8859-1'):
base64mime.py(76): def body_encode(s, maxlinelen=76, eol=NL):
base64mime.py(102): def decode(string):
base64mime.py(118): body_decode = decode
base64mime.py(119): decodestring = decode
utils.py(48): COMMASPACE = ', '
utils.py(49): EMPTYSTRING = ''
utils.py(50): UEMPTYSTRING = ''
utils.py(51): CRLF = '\r\n'
utils.py(52): TICK = "'"
utils.py(54): specialsre = re.compile(r'[][\\()<>@,:;".]')
utils.py(55): escapesre = re.compile(r'[\\"]')
utils.py(59): _has_surrogates = re.compile(
utils.py(60):     '([^\ud800-\udbff]|\A)[\udc00-\udfff]([^\udc00-\udfff]|\Z)').search
utils.py(64): def _sanitize(string):
utils.py(72): def formataddr(pair, charset='utf-8'):
utils.py(106): def getaddresses(fieldvalues):
utils.py(114): ecre = re.compile(r'''
utils.py(122):   ''', re.VERBOSE | re.IGNORECASE)
utils.py(125): def _format_timetuple_and_zone(timetuple, zone):
utils.py(134): def formatdate(timeval=None, localtime=False, usegmt=False):
utils.py(179): def format_datetime(dt, usegmt=False):
utils.py(198): def make_msgid(idstring=None, domain=None):
utils.py(222): def parsedate_to_datetime(data):
utils.py(230): def parseaddr(addr):
utils.py(238): def unquote(str):
utils.py(250): def decode_rfc2231(s):
utils.py(258): def encode_rfc2231(s, charset=None, language=None):
utils.py(273): rfc2231_continuation = re.compile(r'^(?P<name>\w+)\*((?P<num>[0-9]+)\*?)?$',
utils.py(274):     re.ASCII)
utils.py(276): def decode_params(params):
utils.py(332): def collapse_rfc2231_value(value, errors='replace',
utils.py(333):                            fallback_charset='us-ascii'):
utils.py(358): def localtime(dt=None, isdst=-1):
 --- modulename: _encoded_words, funcname: <module>
_encoded_words.py(6): """
_encoded_words.py(42): import re
_encoded_words.py(43): import base64
_encoded_words.py(44): import binascii
_encoded_words.py(45): import functools
_encoded_words.py(46): from string import ascii_letters, digits
_encoded_words.py(47): from email import errors
_encoded_words.py(49): __all__ = ['decode_q',
_encoded_words.py(50):            'encode_q',
_encoded_words.py(51):            'decode_b',
_encoded_words.py(52):            'encode_b',
_encoded_words.py(53):            'len_q',
_encoded_words.py(54):            'len_b',
_encoded_words.py(55):            'decode',
_encoded_words.py(56):            'encode',
_encoded_words.py(64): _q_byte_subber = functools.partial(re.compile(br'=([a-fA-F0-9]{2})').sub,
_encoded_words.py(65):         lambda m: bytes([int(m.group(1), 16)]))
_encoded_words.py(67): def decode_q(encoded):
_encoded_words.py(73): class _QByteMap(dict):
 --- modulename: _encoded_words, funcname: _QByteMap
_encoded_words.py(73): class _QByteMap(dict):
_encoded_words.py(75):     safe = b'-!*+/' + ascii_letters.encode('ascii') + digits.encode('ascii')
_encoded_words.py(77):     def __missing__(self, key):
_encoded_words.py(84): _q_byte_map = _QByteMap()
_encoded_words.py(87): _q_byte_map[ord(' ')] = '_'
_encoded_words.py(89): def encode_q(bstring):
_encoded_words.py(92): def len_q(bstring):
_encoded_words.py(100): def decode_b(encoded):
_encoded_words.py(126): def encode_b(bstring):
_encoded_words.py(129): def len_b(bstring):
_encoded_words.py(135): _cte_decoders = {
_encoded_words.py(136):     'q': decode_q,
_encoded_words.py(137):     'b': decode_b,
_encoded_words.py(140): def decode(ew):
_encoded_words.py(182): _cte_encoders = {
_encoded_words.py(183):     'q': encode_q,
_encoded_words.py(184):     'b': encode_b,
_encoded_words.py(187): _cte_encode_length = {
_encoded_words.py(188):     'q': len_q,
_encoded_words.py(189):     'b': len_b,
_encoded_words.py(192): def encode(string, charset='utf-8', encoding=None, lang=''):
 --- modulename: contextlib, funcname: <module>
contextlib.py(1): """Utilities for with-statement contexts.  See PEP 343."""
contextlib.py(3): import sys
contextlib.py(4): from collections import deque
contextlib.py(5): from functools import wraps
contextlib.py(7): __all__ = ["contextmanager", "closing", "ContextDecorator", "ExitStack"]
contextlib.py(10): class ContextDecorator(object):
 --- modulename: contextlib, funcname: ContextDecorator
contextlib.py(10): class ContextDecorator(object):
contextlib.py(11):     "A base class or mixin that enables context managers to work as decorators."
contextlib.py(13):     def _recreate_cm(self):
contextlib.py(25):     def __call__(self, func):
contextlib.py(33): class _GeneratorContextManager(ContextDecorator):
 --- modulename: contextlib, funcname: _GeneratorContextManager
contextlib.py(33): class _GeneratorContextManager(ContextDecorator):
contextlib.py(34):     """Helper for @contextmanager decorator."""
contextlib.py(36):     def __init__(self, func, *args, **kwds):
contextlib.py(40):     def _recreate_cm(self):
contextlib.py(46):     def __enter__(self):
contextlib.py(52):     def __exit__(self, type, value, traceback):
contextlib.py(85): def contextmanager(func):
contextlib.py(119): class closing(object):
 --- modulename: contextlib, funcname: closing
contextlib.py(119): class closing(object):
contextlib.py(135):     """
contextlib.py(136):     def __init__(self, thing):
contextlib.py(138):     def __enter__(self):
contextlib.py(140):     def __exit__(self, *exc_info):
contextlib.py(145): class ExitStack(object):
 --- modulename: contextlib, funcname: ExitStack
contextlib.py(145): class ExitStack(object):
contextlib.py(156):     """
contextlib.py(157):     def __init__(self):
contextlib.py(160):     def pop_all(self):
contextlib.py(167):     def _push_cm_exit(self, cm, cm_exit):
contextlib.py(174):     def push(self, exit):
contextlib.py(194):     def callback(self, callback, *args, **kwds):
contextlib.py(207):     def enter_context(self, cm):
contextlib.py(220):     def close(self):
contextlib.py(224):     def __enter__(self):
contextlib.py(227):     def __exit__(self, *exc_details):
Connection.py(2): import urllib as urllib
Connection.py(3): import json
Connection.py(4): import socket
Connection.py(5): from smgLogger import logger
Connection.py(7): def makeRequest(relativePath, basePath='http://martijnbrekelmans.com/', tries=0, maxtimeout=10):
Connection.py(33): def getJSON(relativePath):
Connection.py(42): def getVersion():
Connection.py(49): def downloadResource(resource):
ProgramSkeleton.py(5): from smgLogger import logger
ProgramSkeleton.py(7): configuration = Configuration.Configuration()
 --- modulename: Configuration, funcname: __init__
Configuration.py(14):         super().__init__()
Configuration.py(15):         self.config_path = os.path.join('config', 'config.ini')
Configuration.py(16):         self._Configuration__keep_spaces = True
Configuration.py(17):         if self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(18):             self.read_file(open(self.config_path, 'r', encoding = 'utf-8'))
ProgramSkeleton.py(10): class ProgramSkeleton:
 --- modulename: ProgramSkeleton, funcname: ProgramSkeleton
ProgramSkeleton.py(10): class ProgramSkeleton:
ProgramSkeleton.py(16):     """
ProgramSkeleton.py(17):     def __init__(self):
ProgramSkeleton.py(33):     def get_root(self):
ProgramSkeleton.py(39):     def verify_structure(self):
ProgramSkeleton.py(55):     def error_current_song_file(self, missingResource):
ProgramSkeleton.py(59):     def error_config(self, missingResource):
ProgramSkeleton.py(65):     def error_resources(self, missingResource):
ProgramSkeleton.py(70):     def error_json(self, missingResource):
SMG.py(11): import Configuration
SMG.py(12): import GLOBALS
SMG.py(13): programSkeleton = ProgramSkeleton.ProgramSkeleton()
 --- modulename: ProgramSkeleton, funcname: __init__
ProgramSkeleton.py(18):         self.structure = {
ProgramSkeleton.py(20):                 ('current_song.txt', self.error_current_song_file)],
ProgramSkeleton.py(22):                 ('music_players.json', self.error_json),
ProgramSkeleton.py(23):                 ('config.ini', self.error_config)],
ProgramSkeleton.py(25):                 ('icon-16.png', self.error_resources),
ProgramSkeleton.py(26):                 ('icon-16.ico', self.error_resources),
ProgramSkeleton.py(27):                 ('icon-32.png', self.error_resources),
ProgramSkeleton.py(28):                 ('icon-60.ico', self.error_resources),
ProgramSkeleton.py(29):                 ('icon-60.png', self.error_resources)]}
ProgramSkeleton.py(30):         self.root = GLOBALS.ROOT
ProgramSkeleton.py(31):         self.verify_structure()
 --- modulename: ProgramSkeleton, funcname: verify_structure
ProgramSkeleton.py(45):         for (directory, files) in self.structure.items():
ProgramSkeleton.py(46):             if not os.path.exists(directory):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(52):                     error(aFile)
 --- modulename: ProgramSkeleton, funcname: error_current_song_file
ProgramSkeleton.py(57):         open(os.path.join(self.root, 'current_song.txt'), 'w', encoding = 'utf-8')
ProgramSkeleton.py(53):                     continue
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(45):         for (directory, files) in self.structure.items():
ProgramSkeleton.py(46):             if not os.path.exists(directory):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(45):         for (directory, files) in self.structure.items():
ProgramSkeleton.py(46):             if not os.path.exists(directory):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(50):                 filepath = os.path.join(directory, aFile)
ProgramSkeleton.py(51):                 if not os.path.exists(filepath):
ProgramSkeleton.py(49):             for (aFile, error) in files:
ProgramSkeleton.py(45):         for (directory, files) in self.structure.items():
SMG.py(14): configuration = Configuration.Configuration()
 --- modulename: Configuration, funcname: __init__
Configuration.py(14):         super().__init__()
Configuration.py(15):         self.config_path = os.path.join('config', 'config.ini')
Configuration.py(16):         self._Configuration__keep_spaces = True
Configuration.py(17):         if self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(18):             self.read_file(open(self.config_path, 'r', encoding = 'utf-8'))
SMG.py(15): import identifiers
 --- modulename: identifiers, funcname: <module>
identifiers.py(4): import types
identifiers.py(5): import re
identifiers.py(6): import json
identifiers.py(7): import os
identifiers.py(10): import pywintypes
identifiers.py(11): import win32com
identifiers.py(12): import win32com.client
identifiers.py(13): import helpers
identifiers.py(14): from smgLogger import logger
identifiers.py(16): APPS = []
identifiers.py(17): BROWSERS = []
identifiers.py(19): class App:
 --- modulename: identifiers, funcname: App
identifiers.py(19): class App:
identifiers.py(20):     def __init__(self, parameters):
identifiers.py(64):     def identify(self, title, window_class_name):
identifiers.py(90): class Browser(App):
 --- modulename: identifiers, funcname: Browser
identifiers.py(90): class Browser(App):
identifiers.py(92):         instead of APPS'''
identifiers.py(94):     def __init__(self, *args, **kwargs):
identifiers.py(99): def mediamonkey_identify(self, title, window_class_name):
identifiers.py(109): def winamp_identify(self, title, window_class_name):
identifiers.py(127): def foobar_identify(self, title, window_class_name):
identifiers.py(148): def jrivermp(self):
identifiers.py(157): def itunes(self):
identifiers.py(222): def vlc(self, title, window_class_name):
identifiers.py(230): def clementine(self, title, window_class_name):
identifiers.py(236): jrivermp.jriver         = None
identifiers.py(238): CHROME                  = Browser({'name': 'Google Chrome',                  'apptype': 'webbrowser',        'identifiers': [' - Google Chrome'] })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(239): CHROME_APPLICATION_MODE = Browser({'name': 'Google Chrome Application mode', 'apptype': 'webbrowser',        'identifiers': ['- Google Chrome'], 'window_class_name': 'Chrome_WidgetWin_1' })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(240): FIREFOX                 = Browser({'name': 'Mozilla Firefox',                'apptype': 'webbrowser',        'identifiers': [' - Mozilla Firefox'] })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(241): FIREFOX_DEV             = Browser({'name': 'Mozilla Firefox Dev edition',    'apptype': 'webbrowser',        'identifiers': [' - Firefox Developer Edition'] })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(242): PALEMOON                = Browser({'name': 'Palemoon',                       'apptype': 'webbrowser',        'identifiers': [' - Pale Moon'] })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(243): OPERA                   = Browser({'name': 'Opera',                          'apptype': 'webbrowser',        'identifiers': [' - Opera'] })
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(244): WATERFOX                = Browser({'name': 'Waterfox',                       'apptype': 'webbrowser',        'identifiers': [' - Waterfox']})
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(245): VIVALDI                 = Browser({'name': 'Vivaldi',                        'apptype': 'webbrowser',        'identifiers': [''],                'window_class_name': 'Chrome_WidgetWin_1', 'remove_characters': [' - Google Chrome', '- Google Chrome']})
 --- modulename: identifiers, funcname: __init__
identifiers.py(95):         super().__init__(*args, **kwargs)
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(96):         BROWSERS.append(self)
identifiers.py(247): CLEMENTINE              = App({    'name': 'Clementine',                     'apptype': 'music_player',      'identify': clementine})
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(248): VLC                     = App({    'name': 'VLC media player',               'apptype': 'music_player',      'identifiers': ['VLC'], 'window_class_name': 'QWidget', 'identify': vlc })
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(249): MEDIAMONKEY             = App({    'name': 'Media monkey',                   'apptype': 'music_player',      'identifiers': ['- MediaMonkey'], 'identify': mediamonkey_identify })
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(250): WINAMP                  = App({    'name': 'Winamp',                         'apptype': 'music_player',      'identifiers': [' - Winamp'], 'identify': winamp_identify, 'window_class_name': 'Winamp v1.x'})
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(251): FOOBAR                  = App({    'name': 'Foobar2000',                     'apptype': 'music_player',      'identifiers': ['[foobar2000'], 'window_class_name': '{97E27FAA-C0B3-4b8e-A693-ED7881E99FC1}', 'identify': foobar_identify })
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(252): JRIVER                  = App({    'name': 'Jriver media center',            'apptype': 'misc_music_player', 'identify': jrivermp })
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(253): ITUNES                  = App({    'name': 'iTunes',                         'apptype': 'misc_music_player', 'identify': itunes, 'startup': False })
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(257): def loadMusicplayers():
identifiers.py(266): loadMusicplayers()
 --- modulename: identifiers, funcname: loadMusicplayers
identifiers.py(258):     try:
identifiers.py(259):         json_obj = json.load(open(os.path.join('config', 'music_players.json'), encoding='utf-8'))
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
identifiers.py(264):         globals()[music_player] = App(json_obj[music_player])
 --- modulename: identifiers, funcname: __init__
identifiers.py(37):         self.name              = parameters['name']
identifiers.py(38):         self.type              = parameters['apptype']
identifiers.py(39):         self.identifiers       = parameters.get('identifiers', [])
identifiers.py(40):         self.replace_title     = parameters.get('replace_title', True)
identifiers.py(41):         self.window_class_name = parameters.get('window_class_name', '')
identifiers.py(42):         self.remove_characters = parameters.get('remove_characters', [])
identifiers.py(43):         self.gui_name          = parameters.get('gui_name', self.name)
identifiers.py(44):         self.startup           = parameters.get('startup', True)
identifiers.py(46):         self.needsGroovemarklet = False
identifiers.py(47):         if parameters['apptype'] == 'web_music_player':
identifiers.py(49):             if "needsGroovemarklet" not in parameters.keys():
identifiers.py(50):                 self.needsGroovemarklet = True
identifiers.py(52):         try:
identifiers.py(53):             if not parameters['apptype'] == 'webbrowser':
identifiers.py(54):                 APPS.append(self)
identifiers.py(58):         try:
identifiers.py(59):             self.identify = types.MethodType(parameters['identify'], App)
identifiers.py(60):         except KeyError:
identifiers.py(61):             pass
identifiers.py(263):     for music_player in json_obj:
SMG.py(16): from smgLogger import logger
SMG.py(17): from TitleModifier import TitleModifier
 --- modulename: TitleModifier, funcname: <module>
TitleModifier.py(1): class TitleModifier():
 --- modulename: TitleModifier, funcname: TitleModifier
TitleModifier.py(1): class TitleModifier():
TitleModifier.py(2):     def __init__(self, configuration):
TitleModifier.py(21):     def toggles_have_changed(self):
TitleModifier.py(32):     def get_modifiers(self, which_string):
TitleModifier.py(45):     def modify_title(self, title):
SMG.py(20): class MainProgramLoop(QObject):
 --- modulename: SMG, funcname: MainProgramLoop
SMG.py(20): class MainProgramLoop(QObject):
SMG.py(21):     finished = Signal()
SMG.py(23):     def __init__(self):
SMG.py(28):     def long_running(self):
SMG.py(49):     def stop(self):
SMG.py(56): class SMG(QObject):
 --- modulename: SMG, funcname: SMG
SMG.py(56): class SMG(QObject):
SMG.py(57):     songChanged = Signal()
SMG.py(59):     def __init__(self):
SMG.py(77):     def select_program(self, app):
SMG.py(89):     def activate_application(self, prog):
SMG.py(103):     def deactivate_application(self, prog):
SMG.py(117):     def start(self):
SMG.py(127):     def stop(self):
SMG.py(134):     def enum_windows(self):
SMG.py(140):     def toggle_running(self):
SMG.py(150):     def write(self, title):
SMG.py(166):     @staticmethod
SMG.py(178):     def execute_identify(self):
SMG.py(186):     def examine_window(self, hwnd, extra):
SMG.py(212):     @staticmethod
SMG.py(225): smg = SMG()
 --- modulename: SMG, funcname: __init__
SMG.py(60):         super().__init__()
SMG.py(61):         self.active_programs   = []
SMG.py(62):         self.inactive_programs = []
SMG.py(63):         self.active_song       = configuration.get('misc', 'no_song_playing')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(64):         self.titleModifier     = TitleModifier(configuration)
 --- modulename: TitleModifier, funcname: __init__
TitleModifier.py(4):         self.configuration = configuration
TitleModifier.py(5):         self.toggles_have_changed()
 --- modulename: TitleModifier, funcname: toggles_have_changed
TitleModifier.py(26):         self.append_state  = self.configuration.get('edit_output', 'append_state') == 'True'
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
TitleModifier.py(27):         self.prepend_state = self.configuration.get('edit_output', 'prepend_state') == 'True'
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
TitleModifier.py(28):         self.filter_state  = self.configuration.get('edit_output', 'filter_state') == 'True'
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
TitleModifier.py(29):         self.replace_state = self.configuration.get('edit_output', 'replace_state') == 'True'
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
TitleModifier.py(12):         self.replacement_characters = {
TitleModifier.py(13):             "\\n": "\n",
TitleModifier.py(15):             "<br>": "\n",
TitleModifier.py(16):             "<br />": "\n",
TitleModifier.py(17):             "<br/>": "\n"
SMG.py(65):         self.mode              = 'normal'
SMG.py(66):         self.selected_program  = None
SMG.py(67):         self.running           = False
SMG.py(68):         self.thread            = QThread()
SMG.py(69):         self.worker            = None
SMG.py(71):         self.append            = configuration.get('edit_output', 'append')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(72):         self.prepend           = configuration.get('edit_output', 'prepend')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
SMG.py(73):         self.filter            = configuration.get('edit_output', 'filter')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
SMG.py(74):         self.replace_in        = configuration.get('edit_output', 'replace_in')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
SMG.py(75):         self.replace_out       = configuration.get('edit_output', 'replace_out')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
SMG.py(229):     smg.activate_application(smg.find_application_by_name(program))
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
 --- modulename: SMG, funcname: activate_application
SMG.py(96):         self.active_programs.append(prog)
SMG.py(97):         if prog in self.inactive_programs:
SMG.py(100):         configuration.set('active_players', prog.gui_name, prog.name)
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
SMG.py(101):         configuration.remove_option('inactive_players', prog.gui_name)
SMG.py(228): for program in configuration['active_players'].values():
SMG.py(231): for program in configuration['inactive_players'].values():
smgui.py(5): from PySide.QtGui import QApplication
smgui.py(6): from smgLogger import logger
smgui.py(7): from uicomponents.uiMain import UiMain
 --- modulename: uiMain, funcname: <module>
uiMain.py(1): from PySide.QtGui import QMainWindow, QTabWidget, QIcon, QSystemTrayIcon, QMessageBox, QMenu, QAction
uiMain.py(2): from PySide.QtCore import Qt, QEvent, QTimer
uiMain.py(3): from PySide import QtGui
uiMain.py(5): import sys
uiMain.py(6): import os
uiMain.py(8): import GLOBALS
uiMain.py(9): import SMG
uiMain.py(10): import Connection
uiMain.py(11): from verifyLicense import verifyLicense
 --- modulename: verifyLicense, funcname: <module>
verifyLicense.py(1): from Connection import makeRequest
verifyLicense.py(2): from hashlib    import md5
verifyLicense.py(3): from uuid       import getnode as get_mac
 --- modulename: util, funcname: <module>
util.py(1): import sys, os
util.py(2): import contextlib
util.py(3): import subprocess
util.py(6): if os.name == "nt":
util.py(8):     def _get_build_version():
util.py(31):     def find_msvcrt():
util.py(48):     def find_library(name):
util.py(63): if os.name == "ce":
util.py(73): if os.name == "posix" and sys.platform == "darwin":
util.py(86): elif os.name == "posix":
util.py(236): def test():
util.py(264): if __name__ == "__main__":
 --- modulename: util, funcname: find_library
util.py(49):         if name in ('c', 'm'):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(53):             fname = os.path.join(directory, name)
util.py(54):             if os.path.isfile(fname):
util.py(56):             if fname.lower().endswith(".dll"):
util.py(58):             fname = fname + ".dll"
util.py(59):             if os.path.isfile(fname):
util.py(52):         for directory in os.environ['PATH'].split(os.pathsep):
util.py(61):         return None
 --- modulename: util, funcname: find_library
util.py(49):         if name in ('c', 'm'):
util.py(50):             return find_msvcrt()
 --- modulename: util, funcname: find_msvcrt
util.py(33):         version = _get_build_version()
 --- modulename: util, funcname: _get_build_version
util.py(15):         prefix = "MSC v."
util.py(16):         i = sys.version.find(prefix)
util.py(17):         if i == -1:
util.py(19):         i = i + len(prefix)
util.py(20):         s, rest = sys.version[i:].split(" ", 1)
util.py(21):         majorVersion = int(s[:-2]) - 6
util.py(22):         minorVersion = int(s[2:3]) / 10.0
util.py(24):         if majorVersion == 6:
util.py(26):         if majorVersion >= 6:
util.py(27):             return majorVersion + minorVersion
util.py(34):         if version is None:
util.py(37):         if version <= 6:
util.py(40):             clibname = 'msvcr%d' % (version * 10)
util.py(43):         import importlib.machinery
util.py(44):         if '_d.pyd' in importlib.machinery.EXTENSION_SUFFIXES:
util.py(46):         return clibname+'.dll'
verifyLicense.py(4): from os         import path
verifyLicense.py(5): from smgLogger  import logger
verifyLicense.py(7): def doesLicenseExist():
verifyLicense.py(11): def getLicenseKey():
verifyLicense.py(19): def verifyLicense(QParent, license_key=""):
uiMain.py(13): from uicomponents.musicPlayers    import UiMusicPlayersFrame
 --- modulename: musicPlayers, funcname: <module>
musicPlayers.py(1): from PySide.QtGui import QFrame, QLabel, QComboBox, QPushButton, QHBoxLayout, QVBoxLayout, QFormLayout
musicPlayers.py(2): import messages
musicPlayers.py(3): import SMG
musicPlayers.py(4): import messages
musicPlayers.py(5): from smgLogger import logger
musicPlayers.py(9): class UiMusicPlayersFrame(QFrame):
 --- modulename: musicPlayers, funcname: UiMusicPlayersFrame
musicPlayers.py(9): class UiMusicPlayersFrame(QFrame):
musicPlayers.py(10):     def __init__(self, *args, **kwargs):
musicPlayers.py(51):     def startup(self):
musicPlayers.py(78):     def change_song(self):
musicPlayers.py(83):     def repopulate_app_select_box(self):
musicPlayers.py(95):     def start(self):
musicPlayers.py(108):     def select_new_app(self, program_name):
uiMain.py(14): from uicomponents.optionsFrame    import UiOptionsFrame
 --- modulename: optionsFrame, funcname: <module>
optionsFrame.py(1): from PySide.QtGui import QLineEdit, QFrame, QLabel, QPushButton, QListWidget, QFileDialog, QFont, QVBoxLayout, QHBoxLayout
optionsFrame.py(2): from PySide.QtCore import Signal
optionsFrame.py(3): import SMG
optionsFrame.py(5): from smgLogger import logger
optionsFrame.py(7): class UiOptionsFrame(QFrame):
 --- modulename: optionsFrame, funcname: UiOptionsFrame
optionsFrame.py(7): class UiOptionsFrame(QFrame):
optionsFrame.py(8):     item_switched = Signal()
optionsFrame.py(10):     def __init__(self, *args, **kwargs):
optionsFrame.py(80):     def disp_dialog(self):
optionsFrame.py(87):     def switch_item_on(self):
optionsFrame.py(103):     def switch_item_off(self):
optionsFrame.py(118):     def change_no_song_playing(self, text):
uiMain.py(15): from uicomponents.editOutputFrame import UiEditOutputFrame
 --- modulename: editOutputFrame, funcname: <module>
editOutputFrame.py(1): from PySide.QtGui import QLineEdit, QFrame, QLabel, QCheckBox, QVBoxLayout, QHBoxLayout, QGridLayout
editOutputFrame.py(2): from PySide.QtCore import Qt
editOutputFrame.py(3): import SMG
editOutputFrame.py(5): class UiEditOutputFrame(QFrame):
 --- modulename: editOutputFrame, funcname: UiEditOutputFrame
editOutputFrame.py(5): class UiEditOutputFrame(QFrame):
editOutputFrame.py(6):     def __init__(self, *args, **kwargs):
editOutputFrame.py(121):     def update_preview(self):
editOutputFrame.py(125):     def append_to_title(self, string):
editOutputFrame.py(130):     def prepend_to_title(self, string):
editOutputFrame.py(135):     def remove_from_title(self, string):
editOutputFrame.py(140):     def replace_in_title_input(self, string):
editOutputFrame.py(154):     def replace_in_title_output(self, string):
editOutputFrame.py(168):     def toggle_append(self, state):
editOutputFrame.py(175):     def toggle_prepend(self, state):
editOutputFrame.py(182):     def toggle_filter(self, state):
editOutputFrame.py(189):     def toggle_replace(self, state):
uiMain.py(16): from uicomponents.richtextDialog  import QRichTextDialog
 --- modulename: richtextDialog, funcname: <module>
richtextDialog.py(1): from PySide.QtGui import QDialog, QLabel, QPushButton, QLineEdit, QHBoxLayout, QVBoxLayout
richtextDialog.py(2): from PySide.QtCore import Qt
richtextDialog.py(5): class QRichTextDialog(QDialog):
 --- modulename: richtextDialog, funcname: QRichTextDialog
richtextDialog.py(5): class QRichTextDialog(QDialog):
richtextDialog.py(6):     def __init__(self, *args, **kwargs):
richtextDialog.py(38):     def setText(self, text):
richtextDialog.py(41):     def okClicked(self):
richtextDialog.py(44):     def cancelClicked(self):
richtextDialog.py(47):     def prompt(self):
uiMain.py(18): from smgLogger import logger
uiMain.py(20): import messages
uiMain.py(22): class UiMain(QMainWindow):
 --- modulename: uiMain, funcname: UiMain
uiMain.py(22): class UiMain(QMainWindow):
uiMain.py(23):     def __init__(self):
uiMain.py(54):     def onStartup(self):
uiMain.py(67):     def exitWithError(self, message):
uiMain.py(72):     def licenseActivator(self, message):
uiMain.py(87):     def askForLicense(self):
uiMain.py(90):     def resizeEvent(self, event):
uiMain.py(97):     def createActions(self):
uiMain.py(105):     def createTrayIcon(self):
uiMain.py(118):     def onActivated(self, reason):
uiMain.py(122):     def minimizeToSystemTray(self):
uiMain.py(129):     def restoreFromSystemTray(self):
uiMain.py(135):     def changeEvent(self, event):
smgui.py(9): logger.info("--------------------")
smgui.py(10): logger.info("Starting up program!")
smgui.py(11): logger.info("--------------------")
smgui.py(13): myappid = 'Azeirah.SMG.Azeirah.15'
smgui.py(14): if hasattr(ctypes.windll.shell32, 'SetCurrentProcessExplicitAppUserModelID'):
smgui.py(15):     ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
smgui.py(17): def on_exit():
smgui.py(24): if __name__ == '__main__':
smgui.py(25):     app = QApplication(sys.argv)
smgui.py(26):     UI = UiMain()
 --- modulename: uiMain, funcname: __init__
uiMain.py(24):         super().__init__()
uiMain.py(26):         self.createWinId()
uiMain.py(27):         self.setWindowTitle('SMG reloaded - v{version} - By Azeirah'.format(version=GLOBALS.VERSION))
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
uiMain.py(28):         self.resize(int(SMG.configuration.get('gui', 'centralWindowWidth')), int(SMG.configuration.get('gui', 'centralWindowHeight')))
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
uiMain.py(30):         self.setWindowIcon(QIcon(os.path.join(GLOBALS.ROOT, 'resources\\icon-60.png')))
uiMain.py(32):         self.tabbed_windows = QTabWidget()
uiMain.py(33):         self.tabbed_windows.resize(400, 300)
uiMain.py(36):         self.setCentralWidget(self.tabbed_windows)
uiMain.py(38):         self.music_players = UiMusicPlayersFrame(self)
 --- modulename: musicPlayers, funcname: __init__
musicPlayers.py(11):         super().__init__(*args, **kwargs)
musicPlayers.py(14):         self.app_select_box = QComboBox(self)
musicPlayers.py(16):         self.selector_lbl        = QLabel('Select your music player: ')
musicPlayers.py(17):         self.current_playing_lbl = QLabel('Current playing song: ')
musicPlayers.py(18):         self.current_playing     = QLabel(SMG.configuration.get('misc', 'no_song_playing'))
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
musicPlayers.py(20):         self.misc_messages = QLabel(self)
musicPlayers.py(21):         self.misc_messages.setText(messages.random_message())
 --- modulename: messages, funcname: random_message
messages.py(66):     n = randint(1, 3)
messages.py(67):     if n < 3:
messages.py(69):     elif n == 3:
messages.py(70):         return choice(uncommonMessages)
musicPlayers.py(22):         self.misc_messages.setOpenExternalLinks(True)
musicPlayers.py(23):         self.misc_messages.setWordWrap(True)
musicPlayers.py(25):         self.repopulate_app_select_box()
 --- modulename: musicPlayers, funcname: repopulate_app_select_box
musicPlayers.py(87):         self.app_select_box.clear()
musicPlayers.py(88):         self.app_select_box.addItem(None)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(91):             self.app_select_box.addItem(program.name)
musicPlayers.py(90):         for program in SMG.smg.active_programs:
musicPlayers.py(27):         self.start_btn = QPushButton('Start')
musicPlayers.py(31):         self.mainLayout = QVBoxLayout(self)
musicPlayers.py(33):         self.formLayout = QFormLayout()
musicPlayers.py(34):         self.formLayout.addRow(self.selector_lbl, self.app_select_box)
musicPlayers.py(35):         self.formLayout.addRow(self.current_playing_lbl, self.current_playing)
musicPlayers.py(37):         self.mainLayout.addLayout(self.formLayout)
musicPlayers.py(38):         self.mainLayout.addWidget(self.misc_messages)
musicPlayers.py(39):         self.mainLayout.addWidget(self.start_btn)
musicPlayers.py(40):         self.mainLayout.addSpacing(100)
musicPlayers.py(43):         SMG.smg.songChanged.connect(self.change_song)
musicPlayers.py(44):         self.app_select_box.activated[str].connect(self.select_new_app)
musicPlayers.py(45):         self.start_btn.clicked.connect(self.start)
musicPlayers.py(48):         self.startup()
 --- modulename: musicPlayers, funcname: startup
musicPlayers.py(54):         try:
musicPlayers.py(55):             last_active_player = SMG.configuration['startup']['last_active_player']
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
musicPlayers.py(59):         logger.info("last active player was {}".format(last_active_player))
musicPlayers.py(61):         if last_active_player:
musicPlayers.py(62):             program = SMG.smg.find_application_by_name(last_active_player)
 --- modulename: SMG, funcname: find_application_by_name
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(221):         for application in identifiers.APPS:
SMG.py(222):             if name == application.name:
SMG.py(223):                 return application
musicPlayers.py(63):             self.app_select_box.setCurrentIndex(self.app_select_box.findText(program.name))
musicPlayers.py(64):             SMG.smg.select_program(program)
 --- modulename: SMG, funcname: select_program
SMG.py(83):         self.selected_program = app
SMG.py(84):         self.mode = 'normal'
SMG.py(86):         if app.type == 'misc_music_player':
musicPlayers.py(65):             if program.startup and self.app_select_box.count() > 1:
musicPlayers.py(66):                 self.start()
 --- modulename: musicPlayers, funcname: start
musicPlayers.py(98):         if SMG.smg.selected_program:
musicPlayers.py(99):             if not SMG.smg.running:
musicPlayers.py(100):                 self.start_btn.setText('Stop')
musicPlayers.py(101):                 self.app_select_box.setDisabled(True)
musicPlayers.py(105):             SMG.smg.toggle_running()
 --- modulename: SMG, funcname: toggle_running
SMG.py(144):         if self.running:
SMG.py(147):             self.start()
 --- modulename: SMG, funcname: start
SMG.py(121):         self.worker = MainProgramLoop()
 --- modulename: SMG, funcname: __init__
SMG.py(24):         super().__init__()
SMG.py(25):         self.running = True
SMG.py(122):         self.worker.moveToThread(self.thread)
SMG.py(123):         self.worker.finished.connect(self.thread.quit)
SMG.py(124):         self.thread.started.connect(self.worker.long_running)
SMG.py(125):         self.thread.start()
SMG.py(148):         self.running = not (self.running)
musicPlayers.py(68):         try:
musicPlayers.py(69):             first_time = SMG.configuration['startup']['first_time']
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
musicPlayers.py(73):         if first_time == 'True':
uiMain.py(39):         self.options       = UiOptionsFrame     (self)
 --- modulename: optionsFrame, funcname: __init__
optionsFrame.py(11):         super().__init__(*args, **kwargs)
optionsFrame.py(14):         self.output_dir_lbl = QLabel('Change Output Directory: ')
optionsFrame.py(15):         self.select_output_dir_btn = QPushButton('...')
optionsFrame.py(17):         self.output_cur_dir_lbl = QLineEdit(SMG.configuration['directories']['output_directory'])
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
optionsFrame.py(18):         self.output_cur_dir_lbl.setReadOnly(True)
optionsFrame.py(20):         self.active_items_list = QListWidget()
optionsFrame.py(22):         self.inactive_items_list = QListWidget()
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(24):             self.active_items_list.addItem(item.name)
optionsFrame.py(23):         for item in SMG.smg.active_programs:
optionsFrame.py(26):         for item in SMG.smg.inactive_programs:
optionsFrame.py(29):         self.switch_active_item_button_off = QPushButton('->')
optionsFrame.py(30):         self.switch_active_item_button_off.setFont(QFont('SansSerif', 17))
optionsFrame.py(32):         self.switch_active_item_button_off.setToolTip('Click to remove the selected player from the music player selection box')
optionsFrame.py(34):         self.switch_active_item_button_on = QPushButton('<-')
optionsFrame.py(35):         self.switch_active_item_button_on.setFont(QFont('SansSerif', 17))
optionsFrame.py(37):         self.switch_active_item_button_on.setToolTip('Click to re-add the selected player from the music player selection box')
optionsFrame.py(39):         self.no_song_playing_label = QLabel("No song playing text: ")
optionsFrame.py(41):         self.no_song_playing_input = QLineEdit(SMG.configuration.get('misc', 'no_song_playing'))
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
optionsFrame.py(43):         self.no_song_playing_label.setToolTip('This is the text that appears when smg can\'t find a song')
optionsFrame.py(44):         self.no_song_playing_input.setToolTip('This is the text that appears when smg can\'t find a song')
optionsFrame.py(47):         self.mainLayout = QVBoxLayout(self)
optionsFrame.py(49):         self.changeOutputDirectoryLayout = QHBoxLayout()
optionsFrame.py(50):         self.changeOutputDirectoryLayout.addWidget(self.output_dir_lbl)
optionsFrame.py(51):         self.changeOutputDirectoryLayout.addWidget(self.select_output_dir_btn)
optionsFrame.py(52):         self.changeOutputDirectoryLayout.addWidget(self.output_cur_dir_lbl)
optionsFrame.py(54):         self.togglePlayersLayout = QHBoxLayout()
optionsFrame.py(55):         self.togglePlayersLayout.addWidget(self.active_items_list)
optionsFrame.py(57):         self.togglePlayersLayoutSwitches = QVBoxLayout()
optionsFrame.py(58):         self.togglePlayersLayoutSwitches.addWidget(self.switch_active_item_button_off)
optionsFrame.py(59):         self.togglePlayersLayoutSwitches.addWidget(self.switch_active_item_button_on)
optionsFrame.py(61):         self.togglePlayersLayout.addLayout(self.togglePlayersLayoutSwitches)
optionsFrame.py(62):         self.togglePlayersLayout.addWidget(self.inactive_items_list)
optionsFrame.py(64):         self.noSongPlayingLayout = QHBoxLayout()
optionsFrame.py(65):         self.noSongPlayingLayout.addWidget(self.no_song_playing_label)
optionsFrame.py(66):         self.noSongPlayingLayout.addWidget(self.no_song_playing_input)
optionsFrame.py(68):         self.mainLayout.addLayout(self.changeOutputDirectoryLayout)
optionsFrame.py(69):         self.mainLayout.addLayout(self.togglePlayersLayout)
optionsFrame.py(70):         self.mainLayout.addLayout(self.noSongPlayingLayout)
optionsFrame.py(73):         self.select_output_dir_btn.clicked.connect(self.disp_dialog)
optionsFrame.py(74):         self.no_song_playing_input.textChanged.connect(self.change_no_song_playing)
optionsFrame.py(75):         self.switch_active_item_button_on.clicked.connect(self.switch_item_on)
optionsFrame.py(76):         self.switch_active_item_button_off.clicked.connect(self.switch_item_off)
optionsFrame.py(77):         self.item_switched.connect(self.parent().music_players.repopulate_app_select_box)
uiMain.py(40):         self.output_editor = UiEditOutputFrame  (self)
 --- modulename: editOutputFrame, funcname: __init__
editOutputFrame.py(7):         super().__init__(*args, **kwargs)
editOutputFrame.py(8):         self.explanation          = QLabel('You can change the title here. Use commas as a separator for multiple edits.')
editOutputFrame.py(10):         self.preview              = QLabel(self)
editOutputFrame.py(11):         self.preview_text         = 'Darude - Sandstorm'
editOutputFrame.py(13):         self.update_preview()
 --- modulename: editOutputFrame, funcname: update_preview
editOutputFrame.py(122):         self.preview.setText(SMG.smg.titleModifier.modify_title(self.preview_text))
 --- modulename: TitleModifier, funcname: modify_title
TitleModifier.py(51):         if self.append_state:
TitleModifier.py(52):             append = self.get_modifiers('append')
 --- modulename: TitleModifier, funcname: get_modifiers
TitleModifier.py(37):         modifier_list = self.configuration.get('edit_output', which_string).split(',')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
TitleModifier.py(39):         for key, value in self.replacement_characters.items():
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
 --- modulename: TitleModifier, funcname: <listcomp>
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(39):         for key, value in self.replacement_characters.items():
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
 --- modulename: TitleModifier, funcname: <listcomp>
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(39):         for key, value in self.replacement_characters.items():
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
 --- modulename: TitleModifier, funcname: <listcomp>
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(39):         for key, value in self.replacement_characters.items():
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
 --- modulename: TitleModifier, funcname: <listcomp>
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(40):             modifier_list = [string.replace(key, value) for string in modifier_list]
TitleModifier.py(39):         for key, value in self.replacement_characters.items():
TitleModifier.py(42):         return modifier_list
TitleModifier.py(53):             for string in append:
TitleModifier.py(54):                 title += string
TitleModifier.py(53):             for string in append:
TitleModifier.py(56):         if self.prepend_state:
TitleModifier.py(61):         if self.filter_state:
TitleModifier.py(66):         if self.replace_state:
TitleModifier.py(72):         return title
editOutputFrame.py(15):         self.prepend_label        = QLabel('Before')
editOutputFrame.py(16):         self.prepend              = QLineEdit(self)
editOutputFrame.py(17):         self.prepend.setDisabled(False)
editOutputFrame.py(18):         self.prepend_checkbox     = QCheckBox(self)
editOutputFrame.py(20):         self.append_label         = QLabel('After')
editOutputFrame.py(21):         self.append               = QLineEdit(self)
editOutputFrame.py(22):         self.append_checkbox      = QCheckBox(self)
editOutputFrame.py(24):         self.filter_label         = QLabel('Filter')
editOutputFrame.py(25):         self.filter               = QLineEdit(self)
editOutputFrame.py(26):         self.filter_checkbox      = QCheckBox(self)
editOutputFrame.py(28):         self.replace_input_label  = QLabel('Replace')
editOutputFrame.py(29):         self.replace_input        = QLineEdit(self)
editOutputFrame.py(30):         self.replace_checkbox     = QCheckBox(self)
editOutputFrame.py(32):         self.replace_output_label = QLabel('With')
editOutputFrame.py(33):         self.replace_output       = QLineEdit(self)
editOutputFrame.py(35):         append_state  = bool(SMG.configuration.get('edit_output', 'append_state')  == 'True')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
editOutputFrame.py(36):         prepend_state = bool(SMG.configuration.get('edit_output', 'prepend_state') == 'True')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(37):         filters_state = bool(SMG.configuration.get('edit_output', 'filter_state')  == 'True')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(38):         replace_state = bool(SMG.configuration.get('edit_output', 'replace_state') == 'True')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(40):         append        = SMG.configuration.get('edit_output', 'append')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(24):             if self._Configuration__keep_spaces:
Configuration.py(25):                 value = self._unwrap_quotes(value)
 --- modulename: Configuration, funcname: _unwrap_quotes
Configuration.py(45):         QUOTE_SYMBOLS = ('"', "'")
Configuration.py(46):         for quote in QUOTE_SYMBOLS:
Configuration.py(47):             if src.startswith(quote) and src.endswith(quote):
Configuration.py(48):                 return src.strip(quote)
Configuration.py(26):             return value
editOutputFrame.py(41):         prepend       = SMG.configuration.get('edit_output', 'prepend')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(42):         filters       = SMG.configuration.get('edit_output', 'filter')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(43):         replace_in    = SMG.configuration.get('edit_output', 'replace_in')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(44):         replace_out   = SMG.configuration.get('edit_output', 'replace_out')
 --- modulename: Configuration, funcname: get
Configuration.py(22):         try:
Configuration.py(23):             value = super().get(section, option)
Configuration.py(27):         except configparser.NoOptionError:
Configuration.py(28):             return ""
editOutputFrame.py(46):         self.append.setText(append)
editOutputFrame.py(47):         self.prepend.setText(prepend)
editOutputFrame.py(48):         self.filter.setText(filters)
editOutputFrame.py(49):         self.replace_input.setText(replace_in)
editOutputFrame.py(50):         self.replace_output.setText(replace_out)
editOutputFrame.py(52):         if append_state:
editOutputFrame.py(53):             self.append_checkbox.setCheckState(Qt.CheckState.Checked)
editOutputFrame.py(58):         if prepend_state:
editOutputFrame.py(61):             self.prepend_checkbox.setCheckState(Qt.CheckState.Unchecked)
editOutputFrame.py(62):             self.prepend.setDisabled(True)
editOutputFrame.py(64):         if filters_state:
editOutputFrame.py(67):             self.filter_checkbox.setCheckState(Qt.CheckState.Unchecked)
editOutputFrame.py(68):             self.filter.setDisabled(True)
editOutputFrame.py(70):         if replace_state:
editOutputFrame.py(73):             self.replace_checkbox.setCheckState(Qt.CheckState.Unchecked)
editOutputFrame.py(74):             self.replace_input.setDisabled(True)
editOutputFrame.py(75):             self.replace_output.setDisabled(True)
editOutputFrame.py(78):         self.mainLayout = QVBoxLayout(self)
editOutputFrame.py(80):         self.editLayout = QGridLayout()
editOutputFrame.py(81):         self.editLayout.addWidget(self.prepend_label,        0, 0)
editOutputFrame.py(82):         self.editLayout.addWidget(self.prepend,              0, 1)
editOutputFrame.py(83):         self.editLayout.addWidget(self.prepend_checkbox,     0, 2)
editOutputFrame.py(85):         self.editLayout.addWidget(self.append_label,         1, 0)
editOutputFrame.py(86):         self.editLayout.addWidget(self.append,               1, 1)
editOutputFrame.py(87):         self.editLayout.addWidget(self.append_checkbox,      1, 2)
editOutputFrame.py(89):         self.editLayout.addWidget(self.filter_label,         2, 0)
editOutputFrame.py(90):         self.editLayout.addWidget(self.filter,               2, 1)
editOutputFrame.py(91):         self.editLayout.addWidget(self.filter_checkbox,      2, 2)
editOutputFrame.py(93):         self.editLayout.addWidget(self.replace_input_label,  3, 0)
editOutputFrame.py(94):         self.editLayout.addWidget(self.replace_input,        3, 1)
editOutputFrame.py(95):         self.editLayout.addWidget(self.replace_checkbox,     3, 2)
editOutputFrame.py(97):         self.editLayout.addWidget(self.replace_output_label, 4, 0)
editOutputFrame.py(98):         self.editLayout.addWidget(self.replace_output,       4, 1)
editOutputFrame.py(100):         self.replaceOutputLayout = QHBoxLayout()
editOutputFrame.py(101):         self.replaceOutputLayout.addWidget(self.replace_output_label)
editOutputFrame.py(102):         self.replaceOutputLayout.addWidget(self.replace_output)
editOutputFrame.py(104):         self.mainLayout.addLayout(self.editLayout)
editOutputFrame.py(105):         self.mainLayout.addWidget(self.preview)
editOutputFrame.py(106):         self.mainLayout.addWidget(self.explanation)
editOutputFrame.py(109):         self.append.           textChanged  .connect(self.append_to_title)
editOutputFrame.py(110):         self.prepend.          textChanged  .connect(self.prepend_to_title)
editOutputFrame.py(111):         self.filter.           textChanged  .connect(self.remove_from_title)
editOutputFrame.py(112):         self.replace_input.    textChanged  .connect(self.replace_in_title_input)
editOutputFrame.py(113):         self.replace_output.   textChanged  .connect(self.replace_in_title_output)
editOutputFrame.py(115):         self.append_checkbox.  stateChanged .connect(self.toggle_append)
editOutputFrame.py(116):         self.prepend_checkbox. stateChanged .connect(self.toggle_prepend)
editOutputFrame.py(117):         self.filter_checkbox.  stateChanged .connect(self.toggle_filter)
editOutputFrame.py(118):         self.replace_checkbox. stateChanged .connect(self.toggle_replace)
uiMain.py(42):         self.tabbed_windows.addTab(self.music_players, 'Music players')
uiMain.py(43):         self.tabbed_windows.addTab(self.options, 'Options')
uiMain.py(44):         self.tabbed_windows.addTab(self.output_editor, 'Edit output')
uiMain.py(47):         self.createActions()
 --- modulename: uiMain, funcname: createActions
uiMain.py(99):         self.restoreAction  = QAction("&Restore",  self, triggered=self.restoreFromSystemTray)
uiMain.py(103):         self.quitAction     = QAction("&Quit",     self, triggered=QtGui.qApp.quit)
uiMain.py(48):         self.createTrayIcon()
 --- modulename: uiMain, funcname: createTrayIcon
uiMain.py(107):         self.trayIconMenu = QMenu(self)
uiMain.py(108):         self.trayIconMenu.addAction(self.restoreAction)
uiMain.py(109):         self.trayIconMenu.addSeparator()
uiMain.py(110):         self.trayIconMenu.addAction(self.quitAction)
uiMain.py(112):         self.trayIcon = QSystemTrayIcon(self)
uiMain.py(113):         self.trayIcon.setIcon(QIcon(os.path.join(GLOBALS.ROOT, 'resources\\icon-60.png')))
uiMain.py(114):         self.trayIcon.setContextMenu(self.trayIconMenu)
uiMain.py(116):         self.trayIcon.activated.connect(self.onActivated)
uiMain.py(50):         self.show()
 --- modulename: uiMain, funcname: resizeEvent
uiMain.py(91):         SMG.configuration.set('gui', 'centralWindowWidth', self.width())
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
uiMain.py(92):         SMG.configuration.set('gui', 'centralWindowHeight', self.height())
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
uiMain.py(52):         self.onStartup()
 --- modulename: uiMain, funcname: onStartup
uiMain.py(56):         if not verifyLicense(self):
 --- modulename: verifyLicense, funcname: verifyLicense
verifyLicense.py(22):     uniqueIdentifier = md5(str(get_mac()).encode('utf-8')).hexdigest()
verifyLicense.py(23):     if not license_key:
verifyLicense.py(24):         license_key = getLicenseKey()
 --- modulename: verifyLicense, funcname: getLicenseKey
verifyLicense.py(13):     if doesLicenseExist():
 --- modulename: verifyLicense, funcname: doesLicenseExist
verifyLicense.py(9):     return path.exists("licenseKey.txt")
verifyLicense.py(14):         with open("licenseKey.txt", "r", encoding="utf-8") as f:
verifyLicense.py(15):             return f.read()
verifyLicense.py(25):         if license_key == None:
verifyLicense.py(28):     import urllib.request as r
verifyLicense.py(31):     answer = makeRequest("SMG/check_license.php?key={0}&hash={1}".format(license_key, uniqueIdentifier), maxtimeout=3)
 --- modulename: Connection, funcname: makeRequest
Connection.py(8):     requestPath = basePath + relativePath
Connection.py(10):     oldTimeout = socket.getdefaulttimeout()
Connection.py(12):     socket.setdefaulttimeout(maxtimeout)
Connection.py(16):     try:
Connection.py(17):         request = r.urlopen(requestPath)
Connection.py(18):         return request.read()
verifyLicense.py(33):     if answer == None:
verifyLicense.py(37):         answer = answer.decode("utf-8")
verifyLicense.py(38):         logger.info(answer)
verifyLicense.py(39):         if answer == "invalid":
verifyLicense.py(41):         elif answer == "valid":
verifyLicense.py(42):             return True
uiMain.py(60):         version = Connection.getVersion()
 --- modulename: Connection, funcname: getVersion
Connection.py(43):     version = makeRequest('SMG/smgversion.txt')
 --- modulename: Connection, funcname: makeRequest
Connection.py(8):     requestPath = basePath + relativePath
Connection.py(10):     oldTimeout = socket.getdefaulttimeout()
Connection.py(12):     socket.setdefaulttimeout(maxtimeout)
Connection.py(16):     try:
Connection.py(17):         request = r.urlopen(requestPath)
Connection.py(18):         return request.read()
Connection.py(44):     if version == None:
Connection.py(47):         return float(version)
uiMain.py(61):         if version > GLOBALS.VERSION:
smgui.py(27):     sys.exit(on_exit())
 --- modulename: smgui, funcname: on_exit
smgui.py(18):     app.exec_()
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: musicPlayers, funcname: change_song
musicPlayers.py(80):         self.current_playing.setText(SMG.smg.active_song)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: musicPlayers, funcname: change_song
musicPlayers.py(80):         self.current_playing.setText(SMG.smg.active_song)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: musicPlayers, funcname: change_song
musicPlayers.py(80):         self.current_playing.setText(SMG.smg.active_song)
 --- modulename: musicPlayers, funcname: change_song
musicPlayers.py(80):         self.current_playing.setText(SMG.smg.active_song)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
 --- modulename: uiMain, funcname: changeEvent
uiMain.py(138):         if event.type() == QEvent.WindowStateChange:
uiMain.py(153):         super().changeEvent(event)
smgui.py(19):     SMG.configuration.set('startup', 'first_time', 'False')
 --- modulename: Configuration, funcname: set
Configuration.py(32):         import identifiers
Configuration.py(34):         try:
Configuration.py(35):             if self._Configuration__keep_spaces:
Configuration.py(36):                 value = self._wrap_to_quotes(value)
 --- modulename: Configuration, funcname: _wrap_to_quotes
Configuration.py(54):         if src:
Configuration.py(55):             return '"%s"' % src
Configuration.py(37):             super().set(section, option, value)
Configuration.py(41):         self.save()
 --- modulename: Configuration, funcname: save
Configuration.py(72):         try:
Configuration.py(73):             if not self.exists():
 --- modulename: Configuration, funcname: exists
Configuration.py(65):         if os.path.exists(self.config_path):
Configuration.py(66):             return True
Configuration.py(75):             with open(self.config_path, 'w', encoding='utf-8') as f:
Configuration.py(76):                 super().write(f)
smgui.py(20):     logger.info("---------------")
smgui.py(21):     logger.info("Exiting program")
smgui.py(22):     logger.info("---------------")
 --- modulename: trace, funcname: _unsettrace
trace.py(80):         sys.settrace(None)
